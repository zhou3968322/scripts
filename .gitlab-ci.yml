stages:
  - test
  - build
  - deploy_master
  - deploy_clients

variables:
  GIT_STRATEGY: none
  PROJECT_REPO_NAMESPACE: nlp
  PROJECT_REPO_NAME: demo_service
  DEPLOYMENT_REPO_NAMESPACE: nlp
  DEPLOYMENT_REPO_NAME: deploy_framework_demo

before_script:
  - export ROOT_PATH=$(pwd)
  - echo 'root path:' $ROOT_PATH
  - docker login -u $DOCKER_USER -p $DOCKER_PW http://dockerhub.datagrand.com
  - mkdir $PROJECT_REPO_NAME
  - cd $PROJECT_REPO_NAME
  - git init
  - git remote add origin ssh://git@git.datagrand.com:58422/$PROJECT_REPO_NAMESPACE/$PROJECT_REPO_NAME.git
  - git fetch --depth=1 origin $CI_COMMIT_SHA
  - git reset --hard FETCH_HEAD
  - source ./docker/ci_docker.conf
  - echo 'commit id:' $CI_COMMIT_SHA
  - echo 'commit user:' $GITLAB_USER_NAME
  - echo 'commit e-mail:' $GITLAB_USER_EMAIL
  - export COMMIT_MESSAGE=$(git log -p -1 --pretty=format:"%s"|head -1)
  - echo 'commit message:' $COMMIT_MESSAGE
  - export DATE=$(date +%Y%m%d)
  - echo 'date:' $DATE
  - export DOCKER_TAG_SUFFIX="ci"_$DATE"_"${CI_COMMIT_SHA:0:7}
  - echo 'docker tag suffix:' $DOCKER_TAG_SUFFIX

test_stage:
  stage: test
  script:
    - cd tests/environment
    - sh build_docker_dev.sh
    - docker stop demo_service_dev && docker rm demo_service_dev
    - docker run -d --name demo_service_dev dockerhub.datagrand.com/nlp/demo_service:dev
    - docker exec demo_service_dev bash -c "cd ./tests/environment && python run_all_test_cases.py"
    - docker cp demo_service_dev:/root/demo_service/tests/TestReport.html $ROOT_PATH/TestReport.html
    - docker stop demo_service_dev && docker rm demo_service_dev
  artifacts:
      paths:
      - TestReport.html

build_stage:
  stage: build
  only:
    - master
  script:
    - cd docker
    - sh ci_docker_script.sh $DOCKER_TAG_SUFFIX
  when: manual
  allow_failure: false

deploy_nlp:
  stage: deploy_master
  only:
   - master
  script:
    - cd $ROOT_PATH
    - mkdir nlp_deploy && cd nlp_deploy
    - git clone --depth=1 ssh://git@git.datagrand.com:58422/$DEPLOYMENT_REPO_NAMESPACE/$DEPLOYMENT_REPO_NAME.git
    - cd $DEPLOYMENT_REPO_NAME
    - git config --local user.email "${GITLAB_USER_EMAIL}"
    - git config --local user.name "${GITLAB_USER_NAME}"
    - sed -i "s/\(dockerhub.datagrand.com\/\)\(.*\)\(\/$DOCKER_IMAGE_NAME:release_\)\(.*\)/\1$PROJECT_REPO_NAMESPACE\3$DOCKER_TAG_SUFFIX/g" docker-compose.yml
    - git add docker-compose.yml
    - git commit -m "${COMMIT_MESSAGE}"
    - git push

#deploy_master:
#  stage: deploy_master
#  only:
#    - master
#  script:
#    - cd $ROOT_PATH
#    - mkdir $DEPLOYMENT_REPO_NAME
#    - cd $DEPLOYMENT_REPO_NAME
#    - git init
#    - git remote add origin ssh://git@git.datagrand.com:58422/$DEPLOYMENT_REPO_NAMESPACE/$DEPLOYMENT_REPO_NAME.git
#    - git fetch --depth=1
#    - for version in $DEPLOY_VERSIONS; do
#    -   branch="test_idps_"$version
#    -   echo "deploy branch:" $branch
#    -   git checkout -b $branch origin/$branch
#    -   docker_namespace=$(echo $branch | sed 's/[^_]*_//' | sed 's/_[^_]*//')
#    -   sed -i "s/\(dockerhub.datagrand.com\/\)\(.*\)\(\/$DOCKER_IMAGE_NAME:release_\)\(.*\)/\1$docker_namespace\3$DOCKER_TAG_SUFFIX/g" docker-compose.yml
#    -   if [ -n "$(git status --porcelain)" ]; then
#    -     git config --local user.email "${GITLAB_USER_EMAIL}"
#    -     git config --local user.name "${GITLAB_USER_NAME}"
#    -     git add docker-compose.yml
#    -     git commit -m "${COMMIT_MESSAGE}"
#    -     git push
#    -   else
#    -     echo "nothing to commit in branch:" $branch
#    -   fi
#    - done
#
#deploy_clients:
#  stage: deploy_clients
#  only:
#    - master
#  script:
#    - cd $ROOT_PATH
#    - mkdir $DEPLOYMENT_REPO_NAME
#    - cd $DEPLOYMENT_REPO_NAME
#    - git init
#    - git remote add origin ssh://git@git.datagrand.com:58422/$DEPLOYMENT_REPO_NAMESPACE/$DEPLOYMENT_REPO_NAME.git
#    - git fetch --depth=1
#    - for branch in $(git for-each-ref --format='%(refname)' refs/remotes | grep -v HEAD | sed 's/.*\///'); do
#    -   type=$(echo $branch | sed 's/_.*//')
#    -   version=$(echo $branch | sed 's/.*_//')
#    -   if [ $type == "achieve" ]; then
#    -     echo $branch "is achieved, ignore it"
#    -   else
#    -     is_target_version=0
#    -     for deploy_version in $DEPLOY_VERSIONS; do
#    -       if [ $version == $deploy_version ]; then
#    -         is_target_version=1
#    -         break
#    -       fi
#    -     done
#    -     if [ $is_target_version == 1 ]; then
#    -       echo "deploy branch:" $branch
#    -       git checkout -b $branch origin/$branch
#    -       docker_namespace=$(echo $branch | sed 's/[^_]*_//' | sed 's/_[^_]*//')
#    -       if [ $docker_namespace == idps ]; then
#    -           echo "skip master branch"
#    -       else
#    -         for ignore_namespace in $IGNORE_NAMESPACE_LIST; do
#    -           if [ $ignore_namespace == $docker_namespace ]; then
#    -             docker_namespace=$DEFAULT_DOCKER_NAMESPACE
#    -             echo "branch" $branch "use default namespace"
#    -             break
#    -           fi
#    -         done
#    -         sed -i "s/\(dockerhub.datagrand.com\/\)\(.*\)\(\/$DOCKER_IMAGE_NAME:release_\)\(.*\)/\1$docker_namespace\3$DOCKER_TAG_SUFFIX/g" docker-compose.yml
#    -         if [ -n "$(git status --porcelain)" ]; then
#    -           git config --local user.email "${GITLAB_USER_EMAIL}"
#    -           git config --local user.name "${GITLAB_USER_NAME}"
#    -           git add docker-compose.yml
#    -           git commit -m "${COMMIT_MESSAGE}"
#    -           git push
#    -         else
#    -           echo "nothing to commit in branch:" $branch
#    -         fi
#    -       fi
#    -     fi
#    -   fi
#    - done
#  when: manual
#  allow_failure: false